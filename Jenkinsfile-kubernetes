pipeline {
  agent {
    kubernetes {
      yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
    - name: maven
      image: maven:3-openjdk-17
      command: ["sleep"]
      args: ["infinity"]
    - name: git
      image: alpine/git
      command: ["sleep"]
      args: ["infinity"]
    - name: kaniko
      image: gcr.io/kaniko-project/executor:debug
      command: ["sleep"]
      args: ["infinity"]
      volumeMounts:
        - name: registry-credentials
          mountPath: /kaniko/.docker
    - name: curl
      image: debian:bullseye
      command: ["sleep"]
      args: ["infinity"]
  volumes:
    - name: registry-credentials
      secret:
        secretName: docker-hub-credential
        items:
          - key: .dockerconfigjson
            path: config.json
'''
    }
  }

  environment {
    githubUser = 'Minseok Kang'
    githubEmail = 'kms860926@gmail.com'
    githubId = 'Kangarooseok'
    githubRepo = 'jenkins-kubernetes'
    githubURL = 'https://github.com/Kangarooseok/jenkins-kubernetes.git'
    dockerhubId = 'suggiss'
    dockerhubRepo = 'jenkins-kaniko'
  }

  stages {
    stage('Checkout') {
      steps {
        container('maven') {
          git branch: 'main', url: 'https://github.com/Kangarooseok/source-maven-java-spring-hello-webapp.git'
        }
      }
    }

    stage('Build') {
      steps {
        container('maven') {
          sh 'mvn clean package -DskipTests=true'
        }
      }
    }

    stage('Test') {
      steps {
        container('maven') {
          sh 'mvn test'
        }
      }
    }

    stage('Build & Tag & Push Docker Image') {
      steps {
        container('kaniko') {
          sh '''
            /kaniko/executor \
              --dockerfile=Dockerfile \
              --context=dir://$WORKSPACE \
              --destination=suggiss/jenkins-kaniko:$BUILD_NUMBER \
              --destination=suggiss/jenkins-kaniko:latest
          '''
        }
      }
    }

    stage('Update K8s Manifests & Push') {
      steps {
        container('git') {
          git branch: 'main', credentialsId: 'github-credential', url: "${githubURL}"

          sh "git config --global --add safe.directory ${env.WORKSPACE}"
          sh "git config --global user.name '${githubUser}'"
          sh "git config --global user.email '${githubEmail}'"

          sh "sed -i 's|image:.*|image: ${dockerhubId}/${dockerhubRepo}:${BUILD_NUMBER}|' deployment.yaml"
          sh "git add deployment.yaml"
          sh "git commit -m 'Jenkins Build Number - ${BUILD_NUMBER}'"

          withCredentials([usernamePassword(credentialsId: 'github-credential', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
            sh "git push https://${GIT_USER}:${GIT_PASS}@github.com/${githubId}/${githubRepo}.git HEAD:main"
          }
        }
      }
    }

    stage('Notify Slack') {
      steps {
        container('curl') {
          withCredentials([string(credentialsId: 'slack-webhook-url', variable: 'SLACK_WEBHOOK')]) {
            script {
              def payload = """{
                "text": ":rocket: Jenkins ÎπåÎìú Î∞è Î∞∞Ìè¨ ÏôÑÎ£å!\\n*Build:* #${env.BUILD_NUMBER}\\n*Image:* ${env.dockerhubId}/${env.dockerhubRepo}:${env.BUILD_NUMBER}"
              }"""
              echo "Webhook env var length: ${SLACK_WEBHOOK.length()}"
              echo "Slack payload content:\n${payload}"
              writeFile file: 'payload.json', text: payload

              // üîç ÎîîÎ≤ÑÍπÖÏö© curl -v + ÏÉÅÌÉú Ï∂úÎ†•
              sh label: 'Send Slack message', script: '''
                set -xe
                apt update && apt install -y curl
                curl -v -X POST -H "Content-type: application/json" \
                  --data @payload.json "$SLACK_WEBHOOK"
              '''
            }
          }
        }
      }
    }
  }
}

